// schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("LOCALHOST_URL") // uses connection pooling
}

model User {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  role UserRole

  garageOwnerId String?
  mechanicId    String?
  shopOwnerId   String?

  garageOwners GarageOwner[]
  mechanics    Mechanic[]
  shopOwners   ShopOwner[]
  Subscription Subscription[]

  @@index([garageOwnerId], name: "garageOwnerId")
  @@index([mechanicId], name: "mechanicId")
  @@index([shopOwnerId], name: "shopOwnerId")
}

model GarageOwner {
  id             String  @id @default(uuid())
  userId         String
  fullNames      String
  phoneNumber    String @unique
  address        String
  supportEmail   String @unique
  password       String
  profilePicture String?

  user   User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  Garage Garage[]


  @@index([userId], name: "userId")
}

model Garage {
  id          String @id @default(uuid())
  garageName  String @unique
  location    String
  phoneNumber String
  email       String
  logo        String
  address     String

  garageOwner   GarageOwner @relation(fields: [garageOwnerId], references: [id], onDelete: Cascade)
  garageOwnerId String
  services      Service[]
  Products      Product[]
}

model Mechanic {
  id              String  @id @default(uuid())
  fullNames       String
  supportEmail           String @unique
  phoneNumber     String @unique
  specialization  String @db.LongText
  experienceYears Int
  address         String
  location        String
  profilePicture  String?

  password String

  userId   String    @unique
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  garageId String?
  services Service[]
}

model ShopOwner {
  id             String  @id @default(uuid())
  fullNames      String
  phoneNumber    String @unique
  supportEmail          String @unique
  address        String
  profilePicture String?
  password       String

  Shop   Shop[]
  userId String?

  
  User   User?   @relation(fields: [userId], references: [id])
}

model Shop {
  id       String    @id @default(uuid())
  shopName String
  shopLogo String
  location String
  products Product[]

  shopOwner   ShopOwner @relation(fields: [shopOwnerId], references: [id], onDelete: Cascade)
  shopOwnerId String
}

model Product {
  id          String   @id @default(uuid())
  name        String
  price       Float
  description String?
  createdAt   DateTime @default(now())

  orders   Order[]
  Shop     Shop?   @relation(fields: [shopId], references: [id])
  Garage   Garage? @relation(fields: [garageid], references: [id])
  shopId   String?
  garageid String?
}

model Order {
  id         String   @id @default(uuid())
  productId  String
  userId     String
  quantity   Int
  totalPrice Float
  createdAt  DateTime @default(now())

  product Product @relation(fields: [productId], references: [id])
}

model Service {
  id          String   @id @default(uuid())
  mechanicId  String
  garageId    String
  description String
  price       Float
  createdAt   DateTime @default(now())

  mechanic Mechanic @relation(fields: [mechanicId], references: [id])
  Garage   Garage   @relation(fields: [garageId], references: [id])
}

model Plan {
  id          String   @id @default(uuid())
  name        String
  description String
  price       Float
  createdAt   DateTime @default(now())

  subscriptions Subscription[]
}

model Subscription {
  id        String   @id @default(uuid())
  startDate DateTime @default(now())
  endDate   DateTime
  isActive  Boolean  @default(true)
  userId    String
  planId    String?

  Plan Plan? @relation(fields: [planId], references: [id])
  user User  @relation(fields: [userId], references: [id])
}

// Enum for user roles
enum UserRole {
  MECHANIC
  GARAGE_OWNER
  SHOP_OWNER
}

model EarlyAccess {
  id        String   @id @default(uuid())
  email     String   @unique
  inviteUrl String?  @unique
  validTill DateTime
  isActive  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
