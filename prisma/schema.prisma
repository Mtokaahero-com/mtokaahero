// schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL") // uses connection pooling
}

model User {
  id          String   @id @default(uuid())
  userName    String
  password    String
  email       String   @unique
  phoneNumber String   @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  roleId      String

  garageOwners GarageOwner[]
  mechanics    Mechanic[]
  shopOwners   ShopOwner[]
  Role         Roles         @relation(fields: [roleId], references: [id])
}

model Roles {
  id   String @id @default(uuid())
  name String
  User User[]
}

model GarageOwner {
  id             String  @id @default(uuid())
  userId         String
  firstName      String
  lastName       String
  address        String
  profilePicture String?

  user   User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  Garage Garage[]

  @@index([userId], name: "userId")
}

model Garage {
  id                String   @id @default(uuid())
  garageName        String   @unique
  ownerFullName     String
  address           String
  phoneNumber       String
  email             String
  garageDescription String
  specialties       String[]
  logo              String

  garageOwnerId String
  garageOwner   GarageOwner @relation(fields: [garageOwnerId], references: [id], onDelete: Cascade)

  contact      Contact[]
  services     Service[]
  Products     Product[]
  Subscription Subscription[]
}

model Mechanic {
  id              String  @id @default(uuid())
  fiestName       String
  lastName        String
  specialization  String  @db.Text
  experienceYears Int
  address         String
  location        String
  profilePicture  String?

  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  services Service[]
  contact  Contact[]
}

model ShopOwner {
  id             String  @id @default(uuid())
  firstName      String
  lastName       String
  address        String
  profilePicture String?

  Shop   Shop[]
  userId String?

  User User? @relation(fields: [userId], references: [id])
}

model Shop {
  id       String    @id @default(uuid())
  shopName String
  shopLogo String
  location String
  products Product[]
  contact  Contact[]

  shopOwner   ShopOwner @relation(fields: [shopOwnerId], references: [id], onDelete: Cascade)
  shopOwnerId String
}

model Product {
  id          String   @id @default(uuid())
  name        String
  price       Float
  description String?
  createdAt   DateTime @default(now())

  orders   Order[]
  Shop     Shop?   @relation(fields: [shopId], references: [id])
  Garage   Garage? @relation(fields: [garageid], references: [id])
  shopId   String?
  garageid String?
}

model Order {
  id         String   @id @default(uuid())
  productId  String
  userId     String
  quantity   Int
  totalPrice Float
  createdAt  DateTime @default(now())

  product Product @relation(fields: [productId], references: [id])
}

model Contact {
  id          String    @id @default(uuid())
  phoneNumber String
  email       String
  address     String
  garageId    String?
  shopId      String?
  mechanicId  String?
  Garage      Garage?   @relation(fields: [garageId], references: [id])
  Shop        Shop?     @relation(fields: [shopId], references: [id])
  Mechanic    Mechanic? @relation(fields: [mechanicId], references: [id])
}

model Service {
  id          String   @id @default(uuid())
  mechanicId  String
  garageId    String
  description String
  price       Float
  createdAt   DateTime @default(now())

  mechanic Mechanic @relation(fields: [mechanicId], references: [id])
  Garage   Garage   @relation(fields: [garageId], references: [id])
}

model Plan {
  id          String   @id @default(uuid())
  name        String
  description String
  price       Float
  createdAt   DateTime @default(now())

  subscriptions Subscription[]
}

model Subscription {
  id                       String   @id @default(uuid())
  subscriptionUniqueString String
  isActive                 Boolean  @default(true)
  garageId                 String
  planId                   String?

  Plan   Plan?  @relation(fields: [planId], references: [id])
  garage Garage @relation(fields: [garageId], references: [id])
}
